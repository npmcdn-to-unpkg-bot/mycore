package org.mycore.importer.mapping;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import org.apache.log4j.Logger;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.filter.ElementFilter;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import org.mycore.importer.MCRImportConfig;
import org.mycore.importer.MCRImportManager;
import org.mycore.importer.MCRImportRecord;
import org.mycore.importer.mapping.datamodel.MCRImportDatamodel;
import org.mycore.importer.mapping.datamodel.MCRImportDatamodelManager;
import org.mycore.importer.mapping.mapper.MCRImportMapper;
import org.mycore.importer.mapping.mapper.MCRImportMappingTable;


/**
 * The mapping manager is the main class to map and save records to the
 * file system.
 */
public class MCRImportMappingManager {

    private static final Logger LOGGER = Logger.getLogger(MCRImportMappingManager.class);

    protected XMLOutputter outputter;

    protected List<Element> mcrObjectList;

    protected MCRImportConfig config;

    public MCRImportMappingManager(Element importElement, MCRImportConfig config) throws IOException, JDOMException {
        this.outputter = new XMLOutputter(Format.getPrettyFormat());
        this.config = config;
        Element mappingElement = importElement.getChild("mapping");
        if(mappingElement != null) {
            mcrObjectList = mappingElement.getContent(new ElementFilter("mcrobject"));
        }
        // preloads the datamodel files which are stated in the mcrobject elements
        preloadDatamodel();
    }

    /**
     * Preloads the datamodels of each mcrobject element.
     * 
     * @throws IOException
     * @throws JDOMException
     */
    protected void preloadDatamodel() throws IOException, JDOMException {
        MCRImportDatamodelManager dmManager = MCRImportDatamodelManager.getInstance();
        for(Element mcrObjectElement : mcrObjectList) {
            String dmPath = mcrObjectElement.getAttributeValue("datamodel");
            try {
                dmManager.addDatamodel(config.getDatamodelPath() + dmPath);
            } catch(JDOMException e) {
                throw new JDOMException("Could not load datamodel " + dmPath, e);
            } catch(IOException e) {
                throw new IOException("Could not load datamodel " + dmPath, e);
            }
        }
    }

    /**
     * This method maps and saves a record. 
     * 
     * @param record record which have to be mapped and saved
     */
    public void mapAndSaveRecord(MCRImportRecord record) {
        // do the mapping
        MCRImportObject importObject = createMCRObject(record);
        // save the new import object
        saveImportObject(importObject, record.getName());
    }

    /**
     * Saves an imports the object to the specified folder. The save path is
     * generated by the saveToPath in config part of the import file +
     * subFolderName + the id of the import object + ".xml"
     * 
     * @param importObject the object which has to be saved 
     * @param subFolderName the path where the xml file will be saved
     */
    public void saveImportObject(MCRImportObject importObject, String subFolderName) {
        Element ioElement = importObject.createXML();
        String savePath = config.getSaveToPath() + subFolderName + "/";

        // save the new mapped object
        String id = importObject.getId();
        try {
            File folder = new File(savePath);
            if(!folder.exists())
                folder.mkdir();
            FileOutputStream output = new FileOutputStream(folder.getAbsolutePath() + "/" + id + ".xml");
            outputter.output(new Document(ioElement), output);
            output.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Creates an MCRImportObject instance, which is an abstraction of
     * the mycore xml structure.
     * 
     * @param record the record which have to be mapped
     * @return a new instance of MCRImportObject
     */
    public MCRImportObject createMCRObject(MCRImportRecord record) {
        // get the right jdom mcrobject element from the mapping file
        Element mappedObject = getMappedObject(record.getName());
        // path to the datamodel
        String datamodelPath = mappedObject.getAttributeValue("datamodel");

        // create the MCRImportObject instance
        MCRImportObject mcrObject = new MCRImportObject();
        mcrObject.setDatamodelPath(datamodelPath);

        // go through every map element and map the containing fields
        @SuppressWarnings("unchecked")
        List<Element> fieldMappings = mappedObject.getContent(new ElementFilter("map"));
        for(Element map : fieldMappings) {
            mapIt(mcrObject, record, map);
        }
        return mcrObject;
    }

    /**
     * Returns the mcrobject element by the given name
     * from the mapping file.
     * 
     * @param objectName the name of the mcrobject element
     * @return a mcrobject element
     */
    protected Element getMappedObject(String objectName) {
        for(Element mcrObjectElement : mcrObjectList) {
            if(objectName.equals(mcrObjectElement.getAttributeValue("name")))
                return mcrObjectElement;
        }
        return null;
    }

    /**
     * This method creates an instance of the class MCRImportMapper depending
     * on the type attribute of the jdom map. At this instance the method
     * map will be called to map the current map-Element.
     * 
     * @param mcrObject the mycore import xml abstraction
     * @param record the record which comes from the converter 
     * @param map the map of the import file
     */
    protected void mapIt(MCRImportObject mcrObject, MCRImportRecord record, Element map) {
        // get the type
        String type = map.getAttributeValue("type");
        // if the type is empty -> use the metadata mapper
        if(type == null || type.equals("")) {
            type = "metadata";

            // special case for classification
            String metadataName = map.getAttributeValue("to");
            if(MCRImportManager.getInstance().getConfig().isCreateClassificationMapping() && metadataName != null && !metadataName.equals("")) {
                MCRImportDatamodel dm = MCRImportDatamodelManager.getInstance().getDatamodel(mcrObject.getDatamodelPath());
                String className = dm.getClassname(metadataName);
                if(className.equals("MCRMetaClassification"))
                    type = "classification";
            }
        }

        try {
            // try to get a mapper instance depending on the type
            MCRImportMapper mapper = MCRImportMappingTable.createMapperInstance(type);
            if(mapper == null) {
                LOGGER.error("Couldnt resolve mapper " + type);
                return;
            }
            // do the mapping
            mapper.map(mcrObject, record, map);
        } catch(InstantiationException ie) {
            LOGGER.error(ie);
        } catch(IllegalAccessException iae) {
            LOGGER.error(iae);
        }
    }
    
}
