Um eine neue Scrollbar zu erzeugen ist es nötig die Scrollbar Klasse innerhalb der HTML Datei eingebunden zu haben, in unserem Beispiel befindet sich die Klasse relativ zu der html Datei in assets/js. Die Einbindung erfolgt dann wie folgt:

<script type="text/javascript" src="assets/js/scrollBars.js"></script>

Es ist darauf zu achten das die Scrollbar Klasse nicht versucht wird zu verwenden bevor sie eingebunden wurde.
Um nun eine Scrollbar Klasse zu erzeugen muss zunächst ein Scrollbar Objekt erzeugt werden und dieses ein entsprechendes HTML Gerüst erhalten dies geschieht mittels:

var SB = new scrollBar(My_HTML_ID);
SB.init(Horizontal(=true/false)[,OPTIONAL parent(=ID/Object of Parent Element));

Wenn SB.init nicht mit einem Parent Identifikator aufgerufen wird/werden kann muss die Scrollbar später mittels SB.setParent(PARENT_ID) dies nachgeholt werden da ansonsten die ScrollBar nicht dem DOM hinzugefügt wird und somit nicht benutzbar ist.
Der Scrollbar Element Aufbau sieht nun wie folgt aus:

PARENT
	DIV ID=MY_HTML_ID//Hauptcontainer
		DIV CLASS=start//Der Button oben/links, dient dem Schrittweisen bewegen in entsprechende Richtung
		DIV CLASS=empty//Enthält den eigentlichen Scrollbereich mit Bar
			DIV CLASS=spaceStart//Stellt Anfangsbereich der Scrollbar dar
			DIV CLASS=e(Vertical|Horizontal)//stellt den leeren Scrollbereich dar jenachdem ob Horizontal oder Vertical entsprechende Klasse
			DIV CLASS=spaceEnd//Stellt Endbereich der Scrollbar dar
			DIV CLASS=MY_HTML_ID+Bar//enthält die Scrollleiste
				DIV CLASS=barStart//Anfangselement der Scrollleiste
				DIV CLASS=(vertical|horizontal)//Je Nach Ausrichtung stellt die Scrollleiste zum Großteil dar
				DIV CLASS=barEnd//Endelement der Scrollleiste
		DIV CLASS=end//Der Button unten/rechts, dient dem Schrittweisen bewegen in entsprechende Richtung
		
Um nun die Scrollbar einsatzfähig zu machen ist es notwendig die Größe der Scrollbar zu setzen, den maximalen Wert den die Scrollbar annehmen kann, die Größe der Scrollleiste und Optional die aktuelle Position der Scrollbar falls diese ungleich 0 sein sollte.

SB.setSize(INTEGER);
SB.setMaxValue(INTEGER);
SB.setLength(INTEGER);
SB.setValue(INTEGER);

Optional falls die Scrollbar nicht als ScrollBar sondern als Stepper verwendet werden soll muss noch die Funktion setStepper ausgeführt werden und setSteps damit die Bar als Stepper benutzt werden kann.

SB.setStepper(BOOLEAN);
SB.setSteps(INTEGER);

Die Scrollbar ist nun fast einsetzbar, es ist bereits möglich diese neu zu Positionieren und alle gewohnten Scrollbaraktionen darauf auszuführen, jedoch werden die veränderungen welche durch diesen Events verursacht werden nicht an entsprechende Funktionen weitergeleitet. Dafür sind dann die EventListener von nöten, ein Event Listener kann derart hinzugefügt werden.

SB.addListener(scrollBar.LIST_MOVE, new function() { this.moved = function(vector) { alert(vector);}});
SB.addListener(scrollBar.LIST_STEP, new function() { this.steped = function(move) { alert(step);}});

Der erste Aufruf fügt ein Objekt mit der Funktion moved hinzu welche den Parameter vector erhält welcher die neue absolute Position der Scrollbar wiederspiegelt.
Der zweite Aufruf fügt einen Listener für das Stepping Event hinzu, ebenfalls ein Objekt welches jedoch die Funktion steped enthalten muss die den Parameter move entgegen nimmt,
dieser gibt die Veränderung im Bezug auf die letzte Stepping Position wieder.
Damit ist die Scrollbar voll einsatzfähig, nur noch die korrekt Anzeige muss gewährleistet werden dafür ist folgende CSS Struktur mindestens erforderlich, jedoch in weiten teilen flexibel und veränderbar, hier am Beispiel CSS Code für eine horizontale Scrollbar:

/* Main Container */
#MY_HTML_ID {
	height:15px;/*Höhe&Breite des Elements je nachdem welche Ausrichtung sollten diese anders gesetzt werden, stellen die Ausbreitung der Gesamten Scrollbar dar*/
	width: 100%;
	position:absolute;/*Ausrichtung alles möglich, entsprechend Setzung von den Werten bottom, top, left, right*/
	bottom: 0px;
	left: 0px;
	z-index:31;/*Ausreichend großer z-Index damit die Scrollbar über anderen "niedrigeren" Elementen drüber liegt, wie z.B. dem Viewer.well wenn Scrollbar innerhalb des Viewers*/
	cursor: url('../gfx/cursor/mouseHori.cur'), pointer;
}

/* Start & End - Buttons */
#MY_HTML_ID .start {
	background-image: url('../gfx/scrollbars/leftEnd2.png');//Bild welches den Anfang darstellen soll
	width:16px;/*Größe des Bildes, muss gesetzt werden da ansonsten das Div leer bleibt, da dies als Background nur eingebunden wird*/
	height:15px;

}
#MY_HTML_ID .end {
	background-image: url('../gfx/scrollbars/rightEnd2.png');/*Bild welches das Ende darstellen soll*/
	width:16px;/*Größe des Bildes, muss gesetzt werden da ansonsten das Div leer bleibt, da dies als Background nur eingebunden wird*/
	height:15px;
}

/* Scroll Area */
#scrollH .empty { /* Main Container */
	position:relative;/*Nicht zu verändern*/
	height:15px;
}
#scrollH .spaceStart {
	background-image: url('../gfx/scrollbars/spaceStart2.png');/*Bild welches das Ende des Spaces darstellen soll*/
	width:16px;/*Größe des Bildes, muss gesetzt werden da ansonsten das Div leer bleibt, da dies als Background nur eingebunden wird*/
	height:15px;
}
#scrollH .eHorizontal {
	background-repeat:repeat-x;/*Widerholung des Hintergrundes, bei Hintergründen = der Länge der Scrollarea nicht nötig, wie z.B. bei Gradient*/
	background-image: url('../gfx/scrollbars/emptyH2.png');
	position:relative;/*Nicht zu verändern*/
	width:100%;
	height: 15px;
}
#scrollH .spaceEnd {
	background-image: url('../gfx/scrollbars/spaceStart2.png');/*Bild welches das Ende des Spaces darstellen soll*/
	width:16px;/*Größe des Bildes, muss gesetzt werden da ansonsten das Div leer bleibt, da dies als Background nur eingebunden wird*/
	height:15px;
}
#scrollHBar { /* contains ScrollBar */
	position:absolute;/*Nicht zu verändern*/
}

/* ScrollBar */
#scrollHBar .barStart {
	/*background-repeat:repeat-y;*/
	background-image: url('../gfx/scrollbars/blackDot.png');
	position:relative;/*Nicht zu verändern*/
	float: left;/*Nicht zu verändern*/
	width: 1px;/*Positionierung und GRößenangabe*/
	height: 9px;
	top: 3px;
}
#scrollHBar .horizontal {
	background-repeat:repeat-x;
	background-image: url('../gfx/scrollbars/barH2.png');
	position:relative;
	float: left;/*Nicht zu verändern*/
	top: 3px;/*Positionierung und GRößenangabe*/
	left:100%;
	height:9px;
}
#scrollHBar .barEnd {
	background-repeat:repeat-y;
	background-image: url('../gfx/scrollbars/blackDot.png');
	position:relative;
	float: left;/*Nicht zu verändern*/
	width: 1px;/*Positionierung und GRößenangabe*/
	height: 9px;
	top: 3px;
}

Die Benutzung von Float ist allgemein nicht zu empfehlen da dadurch die Scrollbar unschön dargestellt werden kann, bzw durch eine Überschreibung im Init sowieso nutzlos sind. Padding & Margin Werte sollten vermieden werden da aufgrund von inkompatibilitäten der Browser untereinander, allen voran IE das Box-Modell nicht korrekt eingehalten wird und somit Fehlfunktionen der ScrollBar auftreten können. Es ist ratsam wenn solche Werte benötigt werden sollten die grafischen Elemente eher so bearbeitet werden um den selben Effekt zu erzielen. Nicht zu verändern Werte können teilweise verändert werden, dies sollte jedoch nur wo wirklich nötig geschehen da in dieser Konstellation die Funktionalität bereits gegeben ist, welche notwendig ist.